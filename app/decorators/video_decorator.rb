class VideoDecorator < ApplicationDecorator
  decorates :video

  def url
    path = video.youtube? ? 'http://www.youtube.com/watch?v=' : 'http://www.flickr.com/photos/simeonsdotnet/' 
    path + video.origin_poid
  end

  def player
    provider = video.youtube? ? OEmbed::Providers::Youtube : OEmbed::Providers::Flickr
    provider.get(url).html.html_safe
  end

  def for_json
    {'url' => url}
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #   
  #   Or, optionally enable "lazy helpers" by calling this method:
  #     lazy_helpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #   
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"), 
  #                   :class => 'timestamp'
  #   end
end
